#template for lib/Bio/KBase/NarrativeJobService/NarrativeJobServiceImpl.pm


#BEGIN_HEADER
use NarrativeJobService;
#END_HEADER

#BEGIN_CONSTRUCTOR
	$self->{'instance'} = new NarrativeJobService(@args);
#END_CONSTRUCTOR

#BEGIN run_app
    $self->{'instance'}->token($ctx->{'token'});
    ($return, $err) = $self->{'instance'}->run_app($app, $ctx->{'user_id'});
    if ($err) {
        Bio::KBase::Exceptions::KBaseException->throw(
            error => $err,
            method_name => 'run_app'
        );
    }
#END run_app

#BEGIN check_app_state
    $self->{'instance'}->token($ctx->{'token'});
    ($return, $err) = $self->{'instance'}->check_app_state($job_id);
    if ($err) {
        Bio::KBase::Exceptions::KBaseException->throw(
            error => $err,
            method_name => 'check_app_state'
        );
    }
#END check_app_state

#BEGIN suspend_app
    $self->{'instance'}->token($ctx->{'token'});
    ($status, $err) = $self->{'instance'}->suspend_app($job_id);
    if ($err) {
        Bio::KBase::Exceptions::KBaseException->throw(
            error => $err,
            method_name => 'suspend_app'
        );
    }
#END suspend_app

#BEGIN resume_app
    $self->{'instance'}->token($ctx->{'token'});
    ($status, $err) = $self->{'instance'}->resume_app($job_id);
    if ($err) {
        Bio::KBase::Exceptions::KBaseException->throw(
            error => $err,
            method_name => 'resume_app'
        );
    }
#END resume_app

#BEGIN delete_app
    $self->{'instance'}->token($ctx->{'token'});
    ($status, $err) = $self->{'instance'}->delete_app($job_id);
    if ($err) {
        Bio::KBase::Exceptions::KBaseException->throw(
            error => $err,
            method_name => 'delete_app'
        );
    }
#END delete_app
